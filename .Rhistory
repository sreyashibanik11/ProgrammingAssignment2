inv
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
set<-function(y){
x<<-y
inv<<-NULL
}
get<-function()x
setinverse<-function(solve) inv<<-solve
getinverse<-function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
x1<-makeCacheMatrix(c(1,2,3,4),2,2)
x1<-makeCacheMatrix(matrix(c(1,2,3,4),2,2))
x1$getinverse()
cacheSolve(x1)
cacheSolve(x1)
cachesolve(x1$getinverse())
cacheSolve(x1$getinverse())
x1$set(x1$getSolve()) #Setting the function call to be the computed inverse
cacheSolve(x1) #Inverse of the inverse is the original matrix
